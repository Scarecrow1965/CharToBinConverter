// +-------------------------------------------------------------
//
// Equipment:
// ESP32, OLED SSD1306
//
// File: main.cpp
//
// Description:
//
// file to convert char array graphics and animations into binary file
// with the help of GitHub Copilot. This is the Animation file
//
// History:     22-Dec-2023     Scarecrow1965   Created
//
// +-------------------------------------------------------------

#include <Arduino.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <Adafruit_SSD1306.h>
#include <adafruit_gfx.h>
// this set of libraries is for File manipulation
#include <SPI.h>
#include <SD.h>
#include <TimeLib.h>

// library used to sort files when listing directory
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

extern U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2;
extern uint8_t oled_LineH;

// #define LED_BUILTIN 2 // pin for onboard LED or use LED_BUILTIN as the default location
extern bool bLED;

extern Adafruit_SSD1306 display;

extern const char *file0;
extern File file; // this instance is for normal file manipulation
// SPIClass spi = SPIClass(VSPI);

// used in the writeAnimationToFile function
#define CHUNK_SIZE 512 // 512 bytes

#include "charArrayCommon.h"

// *************** DATA ******************
const unsigned char ambulance_Anim[28][350] PROGMEM = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char download_Anim[28][288] PROGMEM = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char upload_Anim[28][288] PROGMEM = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char heartbeat1_Anim[28][350] PROGMEM = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char heartbeat2_Anim[28][350] PROGMEM = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};

extern const uint8_t height_width1;
extern const uint8_t height_width2;
const uint8_t frameCount = 28;
const uint8_t totalcharAnimArray = 5; // ensure this variable is the same as the charArrayAnimation array size
const int arraySize1 = 288;
const int arraySize2 = 350;

struct Animation {
    const unsigned char *data;
    const uint8_t width;
    const uint8_t height;
    const String name;
    const char *fileName;
    const int dataLength;
};

// char array animations short filename array for Arduino
Animation charArrayAnimation[5]{
    {ambulance_Anim[0], height_width2, height_width2, "Ambulance", "/ch_ambAn.bin", arraySize2},
    {download_Anim[0], height_width1, height_width1, "Download", "/ch_dwnAn.bin", arraySize1},
    {upload_Anim[0], height_width1, height_width1, "Upload", "/ch_uplAn.bin", arraySize1},
    {heartbeat1_Anim[0], height_width2, height_width2, "Black Heartbeat", "/ch_hbkAn.bin", arraySize2},
    {heartbeat2_Anim[0], height_width2, height_width2, "White Heartbeat", "/ch_hbwAn.bin", arraySize2},
};

// ============================
// ORIGINAL CODE THAT WORKED WITH PROGMEM
// ============================
// function that will display only one char array animation from struct Animation charArrayAnimations
void charArrayAnimate(const Animation &animation) {
    for (int count = 0; count < frameCount; count++) {
        display.clearDisplay();
        display.drawBitmap(0, 17, &animation.data[count * (animation.dataLength)], animation.width, animation.height, 1);
        display.display();
    }
};
void ambulance_ANIMATION() { charArrayAnimate(charArrayAnimation[0]); };
void upload_ANIMATION() { charArrayAnimate(charArrayAnimation[2]); }; 
void download_ANIMATION() { charArrayAnimate(charArrayAnimation[1]); }; 
void heartbeat1_ANIMATION() { charArrayAnimate(charArrayAnimation[3]); }; 
void heartbeat2_ANIMATION() { charArrayAnimate(charArrayAnimation[4]); };
// ============================
void writeAnimationToFile(const Animation &animation) {
    File file = SD.open(animation.fileName, FILE_WRITE);
    if (!file) {
        Serial.println("Could not open file for writing");
        return;
    }
    // Write the data to the file
    int size = animation.height * animation.width;
    uint8_t buffer[CHUNK_SIZE];
    for (uint8_t i = 0; i < frameCount; i++) {
        for (int j = 0; j < size; j += CHUNK_SIZE) {
            int chunkSize = min(CHUNK_SIZE, size - j);
            memcpy(buffer, &animation.data[i * size + j], chunkSize);
            if (file.write(buffer, chunkSize) != chunkSize) {
                Serial.println("Failed to write data to file");
                break;
            }
        }
    }
    if (file.size() == 0) {
        Serial.println("File is empty");
    }
    file.close();
};

int fileInput(Animation *array) {
    for (uint8_t i = 0; i < totalcharAnimArray; i++) {
        writeAnimationToFile(array[i]);
        CopyArrayStatusToDisplay(array, i);
        bLED = !bLED;
        digitalWrite(LED_BUILTIN, bLED);
        delay(250);
    }
    return 0;
};

void charArrayAnimate2(const Animation &animation) {
    File file = SD.open(animation.fileName);
    if (!file) {
        Serial.println("Failed to open file");
        return;
    }

    uint8_t *bitmap = new uint8_t[animation.width * animation.height];

    for (int count = 0; count < frameCount; count++){
        display.clearDisplay();
        u8g2.clearBuffer();
        u8g2.home();
        u8g2.setCursor(3, oled_LineH * 1 + 2);
        u8g2.print(animation.name);

        // Seek to the correct position in the file
        file.seek(count * animation.width * animation.height);
        // Read one frame from the file into the bitmap
        file.read(bitmap, animation.width * animation.height);

        display.drawBitmap(0, 17, bitmap, animation.width, animation.height, 1);
        display.display();
        delay(250);
    }
    delete[] bitmap;
    file.close();
};

void displayAnimationFromFile(Animation &animation) {
    charArrayAnimate2(animation);
    Serial.println("Verification successful for animation: " + String(animation.name));
}

void verifyAllAnimations(Animation *array, uint8_t totalcharAnimArray) {
    for (uint8_t i = 0; i < totalcharAnimArray; i++) {
        displayAnimationFromFile(array[i]);
    }
};