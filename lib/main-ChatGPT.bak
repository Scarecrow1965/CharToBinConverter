
#include <Arduino.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <Adafruit_SSD1306.h>
#include <adafruit_gfx.h>
#include <SPI.h>
#include <SD.h>
#include <TimeLib.h>

#define OLED_CLOCK 17 // SCA pin on Display = SCL on ESP32
#define OLED_DATA 20  // SDL pin on display = SDA on ESP32
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, OLED_CLOCK, OLED_DATA, U8X8_PIN_NONE); // This works but according to the function, it shouldn't
uint8_t oled_LineH = 0;
// #define LED_BUILTIN 2 // pin for onboard LED or use LED_BUILTIN as the default location
bool bLED = LOW;
#define SCREEN_I2C_ADDR 0x3C // or 0x3C
#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 64     // OLED display height, in pixels
#define OLED_RST_PIN -1      // Reset pin (-1 if not available)
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RST_PIN);
#define SCK 17
#define MISO 19
#define MOSI 23
#define CS 5
const char *file0 = "/";
File file; // this instance is for normal file manipulation
SPIClass spi = SPIClass(VSPI);

const unsigned char ambulance_Anim[28][350] PROGMEM = { {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char download_Anim[28][288] PROGMEM = { {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char upload_Anim[28][288] PROGMEM = { {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char heartbeat1_Anim[28][350] PROGMEM = { {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
const unsigned char heartbeat2_Anim[28][350] PROGMEM = { {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}};

const unsigned char adhd_Logo[350] PROGMEM = {};
const unsigned char arduino_Logo[1024] PROGMEM = {};
const unsigned char arduino_Logo2[350] PROGMEM = {};
const unsigned char amd_Logo[350] PROGMEM = {};
const unsigned char autism_Logo[350] PROGMEM = {};
const unsigned char c_plus_plus_Logo[350] PROGMEM = {};
const unsigned char codepen_Logo[350] PROGMEM = {};
const unsigned char css3_Logo[350] PROGMEM = {};
const unsigned char docker_Logo[350] PROGMEM = {};
const unsigned char git_Logo[350] PROGMEM = {};
const unsigned char github_Logo[350] PROGMEM = {};
const unsigned char html5_Logo[350] PROGMEM = {};
const unsigned char java_Logo[350] PROGMEM = {};
const unsigned char javascript_Logo[350] PROGMEM = {};
const unsigned char jenkins_Logo[350] PROGMEM = {};
const unsigned char jquery_Logo[350] PROGMEM = {};
const unsigned char kubernetes_Logo[350] PROGMEM = {};
const unsigned char mysql_Logo[350] PROGMEM = {};
const unsigned char php_Logo[350] PROGMEM = {};
const unsigned char pinterest_Logo[350] PROGMEM = {};
const unsigned char python_Logo[350] PROGMEM = {};
const unsigned char raspberry_pi_Logo[350] PROGMEM = {};
const unsigned char ruby_programming_language_Logo[350] PROGMEM = {};
const unsigned char united_nations_Logo[350] PROGMEM = {};
const unsigned char air_Drone_Icon[350] PROGMEM = {};
const unsigned char aircraft_Mechanic_Icon[350] PROGMEM = {};
const unsigned char transport_airplane_Icon[350] PROGMEM = {};
const unsigned char fighter_airplane1_Icon[350] PROGMEM = {};
const unsigned char fighter_airplane2_Icon[350] PROGMEM = {};
const unsigned char training_airplane_Icon[350] PROGMEM = {};
const unsigned char airplane_landing_Icon[350] PROGMEM = {};
const unsigned char helicopter1_Icon[350] PROGMEM = {};
const unsigned char helicopter2_Icon[350] PROGMEM = {};
const unsigned char armament_Icon[350] PROGMEM = {};
const unsigned char navigation_compass_Icon[350] PROGMEM = {};
const unsigned char radar_Icon[350] PROGMEM = {};
const unsigned char radio_waves_Icon[350] PROGMEM = {};
const unsigned char sonar_Icon[350] PROGMEM = {};
const unsigned char address_Location_Icon[350] PROGMEM = {};
const unsigned char bookmark_Icon[350] PROGMEM = {};
const unsigned char checkmark_Icon[350] PROGMEM = {};
const unsigned char close_Icon[350] PROGMEM = {};
const unsigned char folder_Icon[350] PROGMEM = {};
const unsigned char home_Icon[350] PROGMEM = {};
const unsigned char idea_Icon[350] PROGMEM = {};
const unsigned char listen_Icon[350] PROGMEM = {};
const unsigned char menu_Icon[350] PROGMEM = {};
const unsigned char services_Icon[350] PROGMEM = {};
const unsigned char settings_Icon[350] PROGMEM = {};
const unsigned char shield_Icon[350] PROGMEM = {};
const unsigned char sound_bars_Icon[350] PROGMEM = {};
const unsigned char speech_bubble_Icon[350] PROGMEM = {};
const unsigned char unavailable_Icon[350] PROGMEM = {};
const unsigned char ufo_Icon[350] PROGMEM = {};
const unsigned char sub_red_october_Icon[350] PROGMEM = {};

const uint8_t frameCount = 28;
const uint8_t height_width1 = 48;
const uint8_t height_width2 = 50;
const uint8_t totalcharAnimArray = 5;     // ensure this variable is the same as the charArrayAnimation array size
const uint8_t totalcharNonAnimArray = 55; // ensure this variable is the same as the charArrayNonAnimation array size

struct Icon {
    const unsigned char *data;
    const uint8_t width;
    const uint8_t height;
    const String name;
    const char *fileName;
};

Icon charArrayNonAnimation[55] {
    {adhd_Logo, height_width2, height_width2, "ADHD Logo", "/adhd_Logo.bin"},                                                           //     framesInfo[0]. == {ADHD_Logo, 50, 50, "ADHD LOGO"},
    {arduino_Logo, 128, 64, "Arduino Logo", "/arduino_Logo.bin"},                                                                       //     framesInfo[1]. == {arduino_Logo, 128, 64, "Arduino Logo"},
    {arduino_Logo2, height_width2, height_width2, "Arduino Logo", "/arduino_Logo2.bin"},                                                //     framesInfo[2]. == {arduino_Logo2, 50, 50, "Arduino Logo"},
    {amd_Logo, height_width2, height_width2, "AMD Logo", "/amd_Logo.bin"},                                                              //     framesInfo[3]. == {amd_Logo, 50, 50, "AMD Logo"},
    {autism_Logo, height_width2, height_width2, "Autism Logo", "/autism_Logo.bin"},                                                     //     framesInfo[4]. == {autism_Logo, 50, 50, "Autism Logo"},
    {c_plus_plus_Logo, height_width2, height_width2, "C++ Logo", "/c_plus_plus_Logo.bin"},                                              //     framesInfo[5]. == {c_plus_plus_Icon, 50, 50, "C++ ICON"},
    {codepen_Logo, height_width2, height_width2, "CodePen Logo", "/codepen_Logo.bin"},                                                  //     framesInfo[6]. == {codepen_Icon, 50, 50, "CodePen ICON"},
    {css3_Logo, height_width2, height_width2, "CSS 3 Logo", "/css3_Logo.bin"},                                                          //     framesInfo[7]. == {css3_Icon, 50, 50, "CSS 3 ICON"},
    {docker_Logo, height_width2, height_width2, "Docker Logo", "/docker_Logo.bin"},                                                     //     framesInfo[8]. == {docker_Icon, 50, 50, "Docker ICON"},
    {git_Logo, height_width2, height_width2, "GIT Logo", "/git_Logo.bin"},                                                              //     framesInfo[9]. == {git_Icon, 50, 50, "GIT ICON"},
    {github_Logo, height_width2, height_width2, "GitHub Logo", "/github_Logo.bin"},                                                     //     framesInfo[10]. == {github_Icon, 50, 50, "GitHub ICON"},
    {html5_Logo, height_width2, height_width2, "HTML 5 Logo", "/html5_Logo.bin"},                                                       //     framesInfo[11]. == {html5_Icon, 50, 50, "HTML 5 ICON"},
    {java_Logo, height_width2, height_width2, "Java Logo", "/java_Logo.bin"},                                                           //     framesInfo[12]. == {java_Icon, 50, 50, "Java ICON"},
    {javascript_Logo, height_width2, height_width2, "JavaScript Logo", "/javascript_Logo.bin"},                                         //     framesInfo[13]. == {javascript_Icon, 50, 50, "JavaScript ICON"},
    {jenkins_Logo, height_width2, height_width2, "Jenkins Logo", "/jenkins_Logo.bin"},                                                  //     framesInfo[14]. == {jenkins_Icon, 50, 50, "Jenkins ICON"},
    {jquery_Logo, height_width2, height_width2, "JQuery Logo", "/jquery_Logo.bin"},                                                     //     framesInfo[15]. == {jquery_Icon, 50, 50, "JQuery ICON"},
    {kubernetes_Logo, height_width2, height_width2, "Kubernetes Logo", "/kubernetes_Logo.bin"},                                         //     framesInfo[16]. == {kubernetes_Icon, 50, 50, "Kubernetes ICON"},
    {mysql_Logo, height_width2, height_width2, "MySQL Logo", "/mysql_Logo.bin"},                                                        //     framesInfo[17]. == {mysql_Logo, 50, 50, "MySQL Logo"},
    {php_Logo, height_width2, height_width2, "php Logo", "/php_Logo.bin"},                                                              //     framesInfo[18]. == {php_Logo, 50, 50, "php Logo"},
    {pinterest_Logo, height_width2, height_width2, "Pinterest Logo", "/pinterest_Logo.bin"},                                            //     framesInfo[19]. == {pinterest, 50, 50, "Pinterest"},
    {python_Logo, height_width2, height_width2, "Python Logo", "/python_Logo.bin"},                                                     //     framesInfo[20]. == {python_Icon, 50, 50, "Python ICON"},
    {raspberry_pi_Logo, height_width2, height_width2, "Raspberry Pi Logo", "/raspberry_pi_Logo.bin"},                                   //     framesInfo[21]. == {raspberry_pi_Logo, 50, 50, "Raspberry Pi Logo"},
    {ruby_programming_language_Logo, height_width2, height_width2, "Ruby Programming Language", "/ruby_programming_language_Logo.bin"}, //     framesInfo[22]. == {ruby_programming_language, 50, 50, "Ruby Programming Language"},
    {united_nations_Logo, height_width2, height_width2, "United Nations Logo", "/united_nations_Logo.bin"},                             //     framesInfo[23]. == {united_nations_Icon, 50, 50, "United Nations Icon"},
    {air_Drone_Icon, height_width2, height_width2, "Air Drone ICON", "/air_Drone_Icon.bin"},                                            //     framesInfo[24]. == {air_Drone, 50, 50, "Air Drone"},
    {aircraft_Mechanic_Icon, height_width2, height_width2, "Aircraft Mechanic ICON", "/aircraft_Mechanic_Icon.bin"},                    //     framesInfo[25]. == {aircraft_Mechanic, 50, 50, "Aircraft Mechanic"},
    {transport_airplane_Icon, height_width2, height_width2, "Transport Aircraft ICON", "/transport_airplane_Icon.bin"},                 //     framesInfo[26]. == {transport_airplane, 50, 50, "Transport Aircraft"},
    {fighter_airplane1_Icon, height_width2, height_width2, "Fighter Aircraft #1 ICON", "/fighter_airplane1_Icon.bin"},                  //     framesInfo[27]. == {fighter_airplane1, 50, 50, "Fighter Aircraft #1"},
    {fighter_airplane2_Icon, height_width2, height_width2, "Fighter Aircraft #2 ICON", "/fighter_airplane2_Icon.bin"},                  //     framesInfo[28]. == {fighter_airplane2, 50, 50, "Fighter Aircraft #2"},
    {training_airplane_Icon, height_width2, height_width2, "Training Aircraft ICON", "/training_airplane_Icon.bin"},                    //     framesInfo[29]. == {training_airplane, 50, 50, "Training Aircraft"},
    {airplane_landing_Icon, height_width2, height_width2, "Airplane Landing ICON", "/airplane_landing_Icon.bin"},                       //     framesInfo[30]. == {airplane_landing, 50, 50, "Airplane Landing ICON"},
    {helicopter1_Icon, height_width2, height_width2, "Helicopter #1 ICON", "/helicopter1_Icon.bin"},                                    //     framesInfo[31]. == {helicopter1, 50, 50, "Helicopter #1"},
    {helicopter2_Icon, height_width2, height_width2, "Helicopter #2 ICON", "/helicopter2_Icon.bin"},                                    //     framesInfo[32]. == {helicopter2, 50, 50, "Helicopter #2"},
    {armament_Icon, height_width2, height_width2, "Armament ICON", "/armament_Icon.bin"},                                               //     framesInfo[33]. == {armament, 50, 50, "Armament"},
    {navigation_compass_Icon, height_width2, height_width2, "Navigation Compass ICON", "/navigation_compass_Icon.bin"},                 //     framesInfo[34]. == {navigation_compass, 50, 50, "Navigation Compass"},
    {radar_Icon, height_width2, height_width2, "Radar ICON", "/radar_Icon.bin"},                                                        //     framesInfo[35]. == {radar, 50, 50, "Radar"},
    {radio_waves_Icon, height_width2, height_width2, "Radio Waves ICON", "/radio_waves_Icon.bin"},                                      //     framesInfo[36]. == {radio_waves, 50, 50, "Radio Waves"},
    {sonar_Icon, height_width2, height_width2, "Sonar ICON", "/sonar_Icon.bin"},                                                        //     framesInfo[37]. == {sonar, 50, 50, "Sonar"},
    {address_Location_Icon, height_width2, height_width2, "Address Location ICON", "/address_Location_Icon.bin"},                       //     framesInfo[38]. == {address_Location, 50, 50, "Address Location"},
    {bookmark_Icon, height_width2, height_width2, "Bookmark ICON", "/bookmark_Icon.bin "},                                              //     framesInfo[39]. == {bookmark_Icon, 50, 50, "Bookmark ICON"},
    {checkmark_Icon, height_width2, height_width2, "Checkmark OK ICON", "/checkmark_Icon.bin"},                                         //     framesInfo[40]. == {checkmark_OK_Icon, 50, 50, "Checkmark OK ICON"},
    {close_Icon, height_width2, height_width2, "Close ICON", "/close_Icon.bin"},                                                        //     framesInfo[41]. == {close_Icon, 50, 50, "Close ICON"},
    {folder_Icon, height_width2, height_width2, "Folder ICON", "/folder_Icon.bin"},                                                     //     framesInfo[42]. == {folder_Icon, 50, 50, "Folder ICON"},
    {home_Icon, height_width2, height_width2, "Home ICON", "/home_Icon.bin"},                                                           //     framesInfo[43]. == {home_Icon, 50, 50, "Home ICON"},
    {idea_Icon, height_width2, height_width2, "Idea ICON", "/idea_Icon.bin"},                                                           //     framesInfo[44]. == {idea_Icon, 50, 50, "Idea ICON"},
    {listen_Icon, height_width2, height_width2, "Listen ICON", "/listen_Icon.bin"},                                                     //     framesInfo[45]. == {listen_Icon, 50, 50, "Listen ICON"},
    {menu_Icon, height_width2, height_width2, "Menu ICON", "/menu_Icon.bin"},                                                           //     framesInfo[46]. == {menu_Icon, 50, 50, "Menu ICON"},
    {services_Icon, height_width2, height_width2, "Services ICON", "/services_Icon.bin"},                                               //     framesInfo[47]. == {services_Icon, 50, 50, "Services ICON"},
    {settings_Icon, height_width2, height_width2, "Settings ICON", "/settings_Icon.bin"},                                               //     framesInfo[48]. == {settings_Icon, 50, 50, "Settings ICON"},
    {shield_Icon, height_width2, height_width2, "Shield ICON", "/shield_Icon.bin"},                                                     //     framesInfo[49]. == {shield_Icon, 50, 50, "Shield ICON"},
    {sound_bars_Icon, height_width2, height_width2, "Sound Bars ICON", "/sound_bars_Icon.bin"},                                         //     framesInfo[50]. == {sound_bars, 50, 50, "Sound Bars"},
    {speech_bubble_Icon, height_width2, height_width2, "Speech Bubble ICON", "/speech_bubble_Icon.bin"},                                //     framesInfo[51]. == {speech_bubble, 50, 50, "Speech Bubble"},
    {unavailable_Icon, height_width2, height_width2, "Unavailable ICON", "/unavailable_Icon.bin"},                                      //     framesInfo[52]. == {unavailable_Icon, 50, 50, "Unavailable Icon"},
    {ufo_Icon, height_width2, height_width2, "UFO ICON", "/ufo_Icon.bin"},                                                              //     framesInfo[53]. == {ufo, 50, 50, "UFO"},
    {sub_red_october_Icon, height_width2, height_width2, "Red October Submarine ICON", "/sub_red_october_Icon.bin"},                    //     framesInfo[54]. == {sub_red_october, 50, 50, "Red October Submarine"},
};

void writeIconToFile(const Icon &icon, const char *fileName) {
    File file = SD.open(fileName, FILE_WRITE);
    if (!file) {
        Serial.println("Could not open file for writing");
        return;
    }
    int size = icon.height * icon.width;
    file.write(icon.data, size);
    file.close();
}; // end of writeIconToFile function

struct Animation {
    const unsigned char *data;
    const uint8_t width;
    const uint8_t height;
    const String name;
    const int dataSize;
    const char *fileName;
};

Animation charArrayAnimation[5] {
    {upload_Anim[0], height_width1, height_width1, "Upload", sizeof(upload_Anim[0]), "/upload_Anim.bin"},
    {download_Anim[0], height_width1, height_width1, "Download", sizeof(download_Anim[0]), "/download_Anim.bin"},
    {heartbeat1_Anim[0], height_width2, height_width2, "Black Heartbeat", sizeof(heartbeat1_Anim[0]), "/heartbeat_black_Anim.bin"},
    {heartbeat2_Anim[0], height_width2, height_width2, "White Heartbeat", sizeof(heartbeat2_Anim[0]), "/heartbeat_white_Anim.bin"},
    {ambulance_Anim[0], height_width2, height_width2, "Ambulance", sizeof(ambulance_Anim[0]), "/ambulance_Anim.bin"},
};

void writeAnimationToFile(const Animation &animation, const char *fileName, const uint8_t frameCount) {
    File file = SD.open(fileName, FILE_WRITE);

    if (!file) {
        Serial.println("Could not open file for writing");
        return;
    }
    int size = animation.width * animation.height;
    for (uint8_t frame = 0; frame < frameCount; frame++) {
        file.write((const uint8_t *)&animation.data[frame], size);
    }

    file.close();
}; // end of writeAnimationToFile function

template <typename T>
void CopyArrayStatusToDisplay(const T *array, uint8_t i) {
    u8g2.clearBuffer();
    u8g2.home();
    u8g2.setCursor(3, oled_LineH * 2 + 2);
    u8g2.print(array[i].name);
    u8g2.setCursor(3, oled_LineH * 3 + 2);
    u8g2.print("has been written to");
    u8g2.setCursor(3, oled_LineH * 4 + 2);
    u8g2.print("the SD card.");
    u8g2.sendBuffer(); // Send it out
}; // end Copy Array Status to Display function

void fileInput(Icon *array, uint8_t total) {
    for (uint8_t i = 0; i < total; i++) {
        writeIconToFile(array[i], array[i].fileName);
        CopyArrayStatusToDisplay(array, i);
        bLED = !bLED; // toggle LED State
        digitalWrite(LED_BUILTIN, bLED);
        delay(250);
    }
}; // end of fileInput function

void fileInput(Animation *array, uint8_t total, uint8_t frameCount) {
    for (uint8_t i = 0; i < total; i++) {
        writeAnimationToFile(array[i], array[i].fileName, frameCount);
        CopyArrayStatusToDisplay(array, i);
        bLED = !bLED; // toggle LED State
        digitalWrite(LED_BUILTIN, bLED);
        delay(250);
    }
}; // end of fileInput function

void DrawLinesAndGraphicsFrame(int FramesPerSecond) {
    u8g2.clearBuffer();
    u8g2.home();
    u8g2.setCursor(3, oled_LineH * 2 + 2);
    u8g2.print("Hello");
    u8g2.setCursor(3, oled_LineH * 3 + 2);
    u8g2.print("World");
    u8g2.setCursor(3, oled_LineH * 4 + 2);
    u8g2.printf("%03d \n", FramesPerSecond); // Placeholder for framerate
    u8g2.drawFrame(0, 0, u8g2.getWidth(), u8g2.getHeight()); // Draw a border around the display

    for (int x = 0; x < u8g2.getWidth(); x += 4) {
        u8g2.drawLine(x, 0, u8g2.getWidth() - x, u8g2.getHeight());
    }

    const int reticleY = u8g2.getHeight() / 2;           // Vertical center of display
    const int reticleR = u8g2.getHeight() / 4 - 2;       // Slightly less than 1/4 screen height
    const int reticleX = u8g2.getWidth() - reticleR - 8; // Right-justified with a small margin

    for (int r = reticleR; r > 0; r -= 3) { 
        u8g2.drawCircle(reticleX, reticleY, r);
        u8g2.drawHLine(reticleX - reticleR - 5, reticleY, 2 * reticleR + 10); // H line through reticle center
        u8g2.drawVLine(reticleX, reticleY - reticleR - 5, 2 * reticleR + 10); // V line through reticle center
    }

    u8g2.sendBuffer(); // Send it out
} // end draw lines, graphics function

double FramesPerSecond(double seconds) {
    static double framesPerSecond;
    framesPerSecond = (framesPerSecond * 0.9) + (1.0 / seconds * 0.1);
    return framesPerSecond;
}; // end FramesPerSecond function

void listDir(fs::FS &fs, const char *dirname, uint8_t levels) {
    Serial.printf("Listing directory: %s\n", dirname);
    File root = fs.open(dirname);
    if (!root) {
        Serial.println("Failed to open directory");
        return;
    }
    if (!root.isDirectory()) {
        Serial.println("Not a directory");
        return;
    }
    File file = root.openNextFile();
    while (file) {
        if (file.isDirectory()) {
            Serial.print("  DIR : ");
            Serial.println(file.name());
            if (levels) {
                listDir(fs, file.name(), levels - 1);
            }
        }
        else {
            Serial.print("  FILE: ");
            Serial.print(file.name());
            Serial.print("  SIZE: ");
            Serial.println(file.size());
        }
        file = root.openNextFile();
    }
}; // end listDir function

void setup() {
    Serial.begin(115200);
    Serial.println("Starting setup");
    pinMode(LED_BUILTIN, OUTPUT); // relying on GPIO2 LED to light up on MB

    u8g2.begin();
    u8g2.clear();
    u8g2.setFont(u8g2_font_profont10_tf);
    oled_LineH = u8g2.getFontAscent() + u8g2.getFontAscent();

    display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
    display.clearDisplay();

    spi.begin(SCK, MISO, MOSI, CS);

    if (!SD.begin(CS)) {
        Serial.println("Card Mount Failed");
        return;
    }

    uint8_t cardType = SD.cardType();

    if (cardType == CARD_NONE) {
        Serial.println("No SD card attached");
        return;
    }

    Serial.print("SD Card Type: ");
    if (cardType == CARD_MMC) {
        Serial.println("MMC");
    }
    else if (cardType == CARD_SD) {
        Serial.println("SDSC");
    }
    else if (cardType == CARD_SDHC) {
        Serial.println("SDHC");
    }
    else {
        Serial.println("UNKNOWN");
    }

    uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.printf("SD Card Size: %lluMB\n", cardSize);

    Serial.println("Setup complete");
}; // end setup function

void loop() {
    Serial.println("SD Card content before function");
    listDir(SD, file0, 0);

    fileInput(charArrayNonAnimation, totalcharNonAnimArray);
    fileInput(charArrayAnimation, totalcharAnimArray, frameCount);

    Serial.println("SD Card content after function");
    listDir(SD, file0, 0);

    // start our fps tracking
    int fps = 0;
    for (;;) {
        bLED = !bLED; // toggle LED State
        digitalWrite(LED_BUILTIN, bLED);

        double dStart = millis() / 1000.0; // record the start time
        DrawLinesAndGraphicsFrame(fps);
        double dEnd = millis() / 1000.0; // record the completion time
        fps = FramesPerSecond(dEnd - dStart);
    }
}; // end loop function
